`timescale 1ns / 1ns
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    13:12:28 03/26/2014 
// Design Name: 
// Module Name:    top 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module top(
           input 	 XCLK,
           input 	 XRESET,
           output 	 XREADY,
	   input [31:0]  XGPI,
           output [31:0] XGPO
           );


   //
   // System Clock and Reset Controller
   //
   wire 		 clk_user;           // Cleaned up and stable clock to the rest of the system
   wire 		 reset_user;         // Cleaned up and synchronous reset to the rest of the system 
   
   system_control sys_con(
			  .XCLK(XCLK),
			  .XRESET(XRESET),
			  .XREADY(XREADY),
			  .clk(clk_user),
			  .reset(reset_user)
			  );   
   
   //
   // Microblaze CPU
   //


   //
   // IO BUS
   //
   wire 		 M1_IO_Addr_Strobe;
   wire 		 M1_IO_Read_Strobe;
   wire 		 M1_IO_Write_Strobe;
   wire [31 : 0] 	 M1_IO_Address;  
   wire [3 : 0] 	 M1_IO_Byte_Enable;
   wire [31 : 0] 	 M1_IO_Write_Data;   
   wire [31:0] 		 M1_IO_Read_Data;
   wire 		 M1_IO_Ready;

   wire 		 M2_Active; 		 
   wire 		 M2_IO_Addr_Strobe;
   wire 		 M2_IO_Read_Strobe;
   wire 		 M2_IO_Write_Strobe;
   wire [31 : 0] 	 M2_IO_Address;  
   wire [3 : 0] 	 M2_IO_Byte_Enable;
   wire [31 : 0] 	 M2_IO_Write_Data;   
   wire [31:0] 		 M2_IO_Read_Data;
   wire 		 M2_IO_Ready;
      
   wire 		 S1_IO_Addr_Strobe;
   wire 		 S1_IO_Read_Strobe;
   wire 		 S1_IO_Write_Strobe;
   wire [31 : 0] 	 S1_IO_Address;  
   wire [3 : 0] 	 S1_IO_Byte_Enable;
   wire [31 : 0] 	 S1_IO_Write_Data;   
   wire [31:0] 		 S1_IO_Read_Data;
   wire 		 S1_IO_Ready;
   
   wire 		 S2_IO_Addr_Strobe;
   wire 		 S2_IO_Read_Strobe;
   wire 		 S2_IO_Write_Strobe;
   wire [31 : 0] 	 S2_IO_Address;  
   wire [3 : 0] 	 S2_IO_Byte_Enable;
   wire [31 : 0] 	 S2_IO_Write_Data;   
   wire [31:0] 		 S2_IO_Read_Data;
   wire 		 S2_IO_Ready;

   wire 		 S3_IO_Addr_Strobe;
   wire 		 S3_IO_Read_Strobe;
   wire 		 S3_IO_Write_Strobe;
   wire [31 : 0] 	 S3_IO_Address;  
   wire [3 : 0] 	 S3_IO_Byte_Enable;
   wire [31 : 0] 	 S3_IO_Write_Data;   
   wire [31:0] 		 S3_IO_Read_Data;
   wire 		 S3_IO_Ready;   

   wire 		 S4_IO_Addr_Strobe;
   wire 		 S4_IO_Read_Strobe;
   wire 		 S4_IO_Write_Strobe;
   wire [31 : 0] 	 S4_IO_Address;  
   wire [3 : 0] 	 S4_IO_Byte_Enable;
   wire [31 : 0] 	 S4_IO_Write_Data;   
   wire [31:0] 		 S4_IO_Read_Data;
   wire 		 S4_IO_Ready;   
   
   //
   // Trace Signals
   //
   wire [0 : 31] 	 Trace_Instruction;
   wire [0:31] 		 Trace_PC;
   wire [0:4] 		 Trace_Reg_Addr;
   wire [0:14] 		 Trace_MSR_Reg;
   wire [0:31] 		 Trace_New_Reg_Value;
   wire [0 : 31] 	 Trace_Data_Address;
   wire [0 : 31] 	 Trace_Data_Write_Value;
   wire [0 : 3] 	 Trace_Data_Byte_Enable;

   wire [7:0] 		 INTC_Interrupt;
   assign INTC_Interrupt = 8'h0;
   
			 
   //
   // data2mem  -p xc6slx16-csg324-3 -bm "ipcore_dir/microblaze_mcs_v1_4.bmm"  -bd ../software/application/basic_application/Debug/test2_application.elf  -bx . -u
   //
   
   microblaze_mcs_v1_4 mcs_0 (
                              .Clk(clk_user), // input Clk
                              .Reset(reset_user), // input Reset
                              .GPI1(XGPI), // input [31 : 0] GPI1
                              .GPO1(XGPO), // output [31 : 0] GPO1
			      .INTC_Interrupt(INTC_Interrupt), // input [7 : 0] INTC_Interrupt
			      .INTC_IRQ(INTC_IRQ), // output INTC_IRQ
			      
			      .IO_Addr_Strobe(M1_IO_Addr_Strobe), // output IO_Addr_Strobe
			      .IO_Read_Strobe(M1_IO_Read_Strobe), // output IO_Read_Strobe
			      .IO_Write_Strobe(M1_IO_Write_Strobe), // output IO_Write_Strobe
			      .IO_Address(M1_IO_Address), // output [31 : 0] IO_Address
			      .IO_Byte_Enable(M1_IO_Byte_Enable), // output [3 : 0] IO_Byte_Enable
			      .IO_Write_Data(M1_IO_Write_Data), // output [31 : 0] IO_Write_Data
			      .IO_Read_Data(M1_IO_Read_Data), // input [31 : 0] IO_Read_Data
			      .IO_Ready(M1_IO_Ready), // input IO_Ready
			      
                              .Trace_Instruction(Trace_Instruction), // output [0 : 31] Trace_Instruction
                              .Trace_Valid_Instr(Trace_Valid_Instr), // output Trace_Valid_Instr
                              .Trace_PC(Trace_PC), // output [0 : 31] Trace_PC
                              .Trace_Reg_Write(Trace_Reg_Write), // output Trace_Reg_Write
                              .Trace_Reg_Addr(Trace_Reg_Addr), // output [0 : 4] Trace_Reg_Addr
                              .Trace_MSR_Reg(Trace_MSR_Reg), // output [0 : 14] Trace_MSR_Reg
                              .Trace_New_Reg_Value(Trace_New_Reg_Value), // output [0 : 31] Trace_New_Reg_Value
                              .Trace_Jump_Taken(Trace_Jump_Taken), // output Trace_Jump_Taken
                              .Trace_Delay_Slot(Trace_Delay_Slot), // output Trace_Delay_Slot
                              .Trace_Data_Address(Trace_Data_Address), // output [0 : 31] Trace_Data_Address
                              .Trace_Data_Access(Trace_Data_Access), // output Trace_Data_Access
                              .Trace_Data_Read(Trace_Data_Read), // output Trace_Data_Read
                              .Trace_Data_Write(Trace_Data_Write), // output Trace_Data_Write
                              .Trace_Data_Write_Value(Trace_Data_Write_Value), // output [0 : 31] Trace_Data_Write_Value
                              .Trace_Data_Byte_Enable(Trace_Data_Byte_Enable), // output [0 : 3] Trace_Data_Byte_Enable
                              .Trace_MB_Halted(Trace_MB_Halted) // output Trace_MB_Halted
                              );

   //
   // Master 2 -- DMA
   //
/* -----\/----- EXCLUDED -----\/-----
   assign M2_IO_Address      = 32'h0000_0000;
   assign M2_IO_Addr_Strobe  = 1'b0;
   assign M2_IO_Read_Strobe  = 1'b0;
   assign M2_IO_Write_Strobe = 1'b0;
   assign M2_IO_Byte_Enable  = 4'b0000;
   assign M2_IO_Write_Data   = 32'h0000_0000;
 -----/\----- EXCLUDED -----/\----- */
   mb_io_dma dma(/*AUTOARG*/
		 // Outputs
		 .active(M2_Active), 
		 .M_IO_Addr_Strobe(M2_IO_Addr_Strobe), 
		 .M_IO_Read_Strobe(M2_IO_Read_Strobe), 
		 .M_IO_Write_Strobe(M2_IO_Write_Strobe),
		 .M_IO_Address(M2_IO_Address), 
		 .M_IO_Byte_Enable(M2_IO_Byte_Enable), 
		 .M_IO_Write_Data(M2_IO_Write_Data), 
		 
		 .S_IO_Read_Data(S3_IO_Read_Data),
		 .S_IO_Ready(S3_IO_Ready),
		 
		 // Inputs
		 .clk(clk_user), 
		 .reset(reset_user), 
		 .M_IO_Read_Data(M2_IO_Read_Data),
		 .M_IO_Ready(M2_IO_Ready),
		 
		 .S_IO_Addr_Strobe(S3_IO_Addr_Strobe),
		 .S_IO_Read_Strobe(S3_IO_Read_Strobe), 
		 .S_IO_Write_Strobe(S3_IO_Write_Strobe), 
		 .S_IO_Address(S3_IO_Address[4:2]),
		 .S_IO_Byte_Enable(S3_IO_Byte_Enable), 
		 .S_IO_Write_Data(S3_IO_Write_Data)
		 ) ;    
   
   wire 		 bus_matrix_fault;
   
   mb_io_bus_matrix bus_matrix(/*AUTOARG*/
			       // Outputs
			       .fault(bus_matrix_fault),

			       //
			       // To Master 1
			       //
			       .M1_IO_Read_Data(M1_IO_Read_Data), 
			       .M1_IO_Ready(M1_IO_Ready),

			       //
			       // To Master 2
			       // 
			       .M2_IO_Read_Data(M2_IO_Read_Data), 
			       .M2_IO_Ready(M2_IO_Ready),

			       //
			       // To Slave 1
			       //
			       .S1_IO_Address(S1_IO_Address), 
			       .S1_IO_Addr_Strobe(S1_IO_Addr_Strobe), 
			       .S1_IO_Read_Strobe(S1_IO_Read_Strobe),
			       .S1_IO_Write_Strobe(S1_IO_Write_Strobe), 
			       .S1_IO_Byte_Enable(S1_IO_Byte_Enable), 
			       .S1_IO_Write_Data(S1_IO_Write_Data),

			       //
			       // To Slave 2
			       //
			       .S2_IO_Address(S2_IO_Address), 
			       .S2_IO_Addr_Strobe(S2_IO_Addr_Strobe), 
			       .S2_IO_Read_Strobe(S2_IO_Read_Strobe),
			       .S2_IO_Write_Strobe(S2_IO_Write_Strobe), 
			       .S2_IO_Byte_Enable(S2_IO_Byte_Enable), 
			       .S2_IO_Write_Data(S2_IO_Write_Data),
			  
			       //
			       // To Slave 3
			       //
			       .S3_IO_Address(S3_IO_Address), 
			       .S3_IO_Addr_Strobe(S3_IO_Addr_Strobe), 
			       .S3_IO_Read_Strobe(S3_IO_Read_Strobe),
			       .S3_IO_Write_Strobe(S3_IO_Write_Strobe), 
			       .S3_IO_Byte_Enable(S3_IO_Byte_Enable), 
			       .S3_IO_Write_Data(S3_IO_Write_Data),
			     
			       //
			       // To Slave 4
			       //
			       .S4_IO_Address(S4_IO_Address), 
			       .S4_IO_Addr_Strobe(S4_IO_Addr_Strobe), 
			       .S4_IO_Read_Strobe(S4_IO_Read_Strobe),
			       .S4_IO_Write_Strobe(S4_IO_Write_Strobe), 
			       .S4_IO_Byte_Enable(S4_IO_Byte_Enable), 
			       .S4_IO_Write_Data(S4_IO_Write_Data),
			    
			       
			       // Inputs
			       
			       .clk(clk_user), 
			       .reset(reset_user),

			       //
			       // From Master 1
			       //
			       .M1_Active(!M2_Active), 
			       .M1_IO_Address(M1_IO_Address), 
			       .M1_IO_Addr_Strobe(M1_IO_Addr_Strobe),
			       .M1_IO_Read_Strobe(M1_IO_Read_Strobe), 
			       .M1_IO_Write_Strobe(M1_IO_Write_Strobe), 
			       .M1_IO_Byte_Enable(M1_IO_Byte_Enable),
			       .M1_IO_Write_Data(M1_IO_Write_Data), 

			       //
			       // From Master 2
			       //
			       .M2_Active(M2_Active), 
			       .M2_IO_Address(M2_IO_Address), 
			       .M2_IO_Addr_Strobe(M2_IO_Addr_Strobe),
			       .M2_IO_Read_Strobe(M2_IO_Read_Strobe), 
			       .M2_IO_Write_Strobe(M2_IO_Write_Strobe), 
			       .M2_IO_Byte_Enable(M2_IO_Byte_Enable),
			       .M2_IO_Write_Data(M2_IO_Write_Data), 			     

			       //
			       // From Slave 1
			       //
			       .S1_IO_Read_Data(S1_IO_Read_Data), 
			       .S1_IO_Ready(S1_IO_Ready),

			       //
			       // From Slave 2
			       //
			       .S2_IO_Read_Data(S2_IO_Read_Data), 
			       .S2_IO_Ready(S2_IO_Ready),			   

			       //
			       // From Slave 3
			       //
			       .S3_IO_Read_Data(S3_IO_Read_Data), 
			       .S3_IO_Ready(S3_IO_Ready),			   			       
			  
			       //
			       // From Slave 4
			       //
			       .S4_IO_Read_Data(S4_IO_Read_Data), 
			       .S4_IO_Ready(S4_IO_Ready)			    
			       ) ;
   

   //
   // Slave 1 -- Block Memory
   //
   
   mb_io_block_memory_32kx1k block_memory(/*AUTOARG*/
					  // Outputs
					  .IO_Read_Data(S1_IO_Read_Data), 
					  .IO_Ready(S1_IO_Ready),
					  // Inputs
					  .clk(clk_user), 
					  .reset(reset_user), 
					  .IO_Addr_Strobe(S1_IO_Addr_Strobe),  
					  .IO_Read_Strobe(S1_IO_Read_Strobe), 
					  .IO_Write_Strobe(S1_IO_Write_Strobe),
					  .IO_Address(S1_IO_Address[11:2]), 
					  .IO_Byte_Enable(S1_IO_Byte_Enable), 
					  .IO_Write_Data(S1_IO_Write_Data)
					  ) ;
   
   
   //
   // Slave 2 -- Register testing module
   //
   mb_io_slave slave0(/*AUTOARG*/
		      // Outputs
		      .IO_Read_Data(S2_IO_Read_Data), 
		      .IO_Ready(S2_IO_Ready),
		      // Inputs
		      .clk(clk_user), 
		      .reset(reset_user), 
		      .IO_Addr_Strobe(S2_IO_Addr_Strobe), 
		      .IO_Read_Strobe(S2_IO_Read_Strobe), 
		      .IO_Write_Strobe(S2_IO_Write_Strobe),
		      .IO_Address(S2_IO_Address[4:2]), 
		      .IO_Byte_Enable(S2_IO_Byte_Enable), 
		      .IO_Write_Data(S2_IO_Write_Data)		    
		      ) ; 

   //
   // Slave 3 -- DMA 
   //

/* -----\/----- EXCLUDED -----\/-----
   assign S3_IO_Read_Data = 32'h0000_0000;
   assign S3_IO_Ready = 1'b1;   
 -----/\----- EXCLUDED -----/\----- */

   //
   // Slave 4
   //

   assign S4_IO_Read_Data = 32'h0000_0000;
   assign S4_IO_Ready = 1'b1;
   
endmodule // top

