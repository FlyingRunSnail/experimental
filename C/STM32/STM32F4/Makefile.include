
##
## Our directory structure
##
SRC_DIR = src
OBJ_DIR = objects
INC_DIR = includes
EXEC_DIR = executable
LIB_DIR = lib

##
## Our tools
##
PREFIX	?= arm-none-eabi
CC		= $(PREFIX)-gcc
LD		= $(PREFIX)-gcc
OBJCOPY		= $(PREFIX)-objcopy
OBJDUMP		= $(PREFIX)-objdump
GDB		= $(PREFIX)-gdb
AR              = $(PREFIX)-ar
FLASH		= $(shell which st-flash)

SOURCES = $(wildcard $(SRC_DIR)/*.c)
OBJECTS  = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(SOURCES))

CINCLUDES = -I$(LIBOPENCM3_PATH)/include 
CINCLUDES += -I $(INC_DIR) 
CINCLUDES += -I ../discovery_board/includes

CFLAGS	= -Os -g -Wall -Wextra -Werror -c 
CFLAGS += $(CINCLUDES)
CFLAGS += -fno-common -mcpu=$(MCPU) -mthumb 
CFLAGS += -mfloat-abi=hard -mfpu=fpv4-sp-d16 -MD -D$(LIBOPENCM3_DEFINE_CPU)


LDFLAGS	= --static -lc 
LDFLAGS += -L../discovery_board/lib -lstm32f4_discovery_board
LDFLAGS += -L$(LIBOPENCM3_PATH)/lib  -L$(LIBOPENCM3_PATH)/lib/stm32/f4 -lopencm3_$(CPU)
LDFLAGS += -T$(LDSCRIPT) -nostartfiles -Wl,--gc-sections 
LDFLAGS += -mthumb -mcpu=$(MCPU) -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16

LDSCRIPT = $(LIBOPENCM3_PATH)/lib/$(MANUFACTURER)/$(REVISION)/libopencm3_$(CPU).ld 

ELF_FILE  = $(EXEC_DIR)/$(TARGET).elf
LIST_FILE = $(EXEC_DIR)/$(TARGET).lst
HEX_FILE  = $(EXEC_DIR)/$(TARGET).hex
SREC_FILE = $(EXEC_DIR)/$(TARGET).srec
BIN_FILE  = $(EXEC_DIR)/$(TARGET).bin
LIB_FILE  = $(LIB_DIR)/$(BOARD).a

OOCD		?= openocd
OOCD_INTERFACE	?= stlink-v2
OOCD_BOARD	?= $(CPU)discovery

all: $(LIST_FILE) $(HEX_FILE) $(SREC_FILE) $(BIN_FILE)

$(ELF_FILE): $(OBJECTS) 
	make -C ../discovery_board library
	$(LD) -o $(ELF_FILE) $(OBJECTS) -lopencm3_stm32f4 $(LDFLAGS)

clean:
	rm -f $(OBJECTS) $(INC_DIR)/*~ $(SRC_DIR)/*~ *~ $(ELF_FILE) $(LIST_FILE) $(BIN_FILE) $(HEX_FILE) $(SREC_FILE) $(OBJ_DIR)/*.d

$(HEX_FILE) :$(ELF_FILE)
	$(OBJCOPY) -Oihex $(ELF_FILE) $(HEX_FILE)

$(SREC_FILE):$(ELF_FILE)
	$(OBJCOPY) -Osrec $(ELF_FILE)  $(SREC_FILE)

$(BIN_FILE):$(ELF_FILE)
	$(OBJCOPY) -Obinary $(ELF_FILE) $(BIN_FILE)

$(LIST_FILE):$(ELF_FILE)
	$(OBJDUMP) -S $(ELF_FILE) >  $(LIST_FILE)


$(LIBRARY): $(OBJECTS)
	$(AR) rcs $(LIBRARY) $(OBJECTS)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c 
	$(CC) $(CFLAGS) -o $@  $< 

FLASH: $(BIN_FILE)
	$(FLASH) write $(BIN_FILE) $(FLASH_START)

.PHONY: clean

-include $(OBJS:.o=.d)
